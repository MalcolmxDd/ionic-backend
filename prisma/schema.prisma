generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categoria {
  id          Int        @id @default(autoincrement())
  nombre      String     @unique
  descripcion String?
  productos   Producto[]
  creadoEn    DateTime   @default(now())
  actualizadoEn DateTime @default(now()) @updatedAt
}

model Producto {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String
  precio      Float
  stock       Int      @default(0)
  imagen      String?  // URL de la imagen
  categoriaId Int?
  categoria   Categoria? @relation(fields: [categoriaId], references: [id])
  activo      Boolean  @default(true)
  creadoEn    DateTime @default(now())
  actualizadoEn DateTime @default(now()) @updatedAt
  carritoItems CarritoItem[]
  pedidoItems  PedidoItem[]
}

model Usuario {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   // Contrase√±a hasheada
  nombre    String
  apellido  String
  telefono  String?
  direccion String?
  rol       Rol      @default(CLIENTE)
  activo    Boolean  @default(true)
  carrito   Carrito?
  pedidos   Pedido[]
  creadoEn  DateTime @default(now())
  actualizadoEn DateTime @default(now()) @updatedAt
}

enum Rol {
  ADMIN
  CLIENTE
}

model Carrito {
  id        Int           @id @default(autoincrement())
  usuarioId Int           @unique
  usuario   Usuario       @relation(fields: [usuarioId], references: [id])
  items     CarritoItem[]
  creadoEn  DateTime      @default(now())
  actualizadoEn DateTime  @default(now()) @updatedAt
}

model CarritoItem {
  id         Int      @id @default(autoincrement())
  carritoId  Int
  carrito    Carrito  @relation(fields: [carritoId], references: [id], onDelete: Cascade)
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id])
  cantidad   Int
  precio     Float    // Precio al momento de agregar al carrito
  creadoEn   DateTime @default(now())
}

model Pedido {
  id          Int          @id @default(autoincrement())
  usuarioId   Int
  usuario     Usuario      @relation(fields: [usuarioId], references: [id])
  items       PedidoItem[]
  total       Float
  estado      EstadoPedido @default(PENDIENTE)
  direccionEnvio String?
  telefono    String?
  creadoEn    DateTime     @default(now())
  actualizadoEn DateTime   @default(now()) @updatedAt
}

model PedidoItem {
  id        Int      @id @default(autoincrement())
  pedidoId  Int
  pedido    Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  productoId Int
  producto  Producto @relation(fields: [productoId], references: [id])
  cantidad  Int
  precio    Float
  creadoEn  DateTime @default(now())
}

enum EstadoPedido {
  PENDIENTE
  CONFIRMADO
  ENVIADO
  ENTREGADO
  CANCELADO
}
